https://lab.ssafy.com/s13/python

# BasicSyntax01

## Python 개요

### Python 특징

- 쉽고 간결한 문법
- 강력한 커뮤니티
- 광범위한 응용 분야
- AL, ML에 가장 일반적으로 사용되며, 기본 언어 채택률이 매우 높음
- 직관적인 문법과 강력한 표준 라이브러리, 빠른 프로토타이핑으로 알고리즘 구현에 유리

### Python interpreter 사용

1. shell 프로그램에서 한번에 한 명령어 씩 입력해서 실행
2. 확장자가 .py인 파일에 작성된 파이썬 프로그램을 실행
    1. `python sample.py` 
    2. Run 버튼을 누르는 것보다 명령어로 실행하는 방법에 우선 익숙해질 것

### 표현식과 값

- 표현식 Expression
    - 값으로 평가될 수 있는 코드 조각
- 값 Value
    - 표현식이 평가된 결과
- 평가 Evaluate
    - **표현식이 평가되어 값이 반환**
- 문장 Statement
    - 실행 가능한 동작을 기술하는 코드
    - 조건문, 반복문, 함수 정의
    - 보통 여러 개의 표현식을 포함

### 타입

- 타입은 **값(피연산자)**과 **값에 적용할 수 있는 연산(연산자)** 2가지 요소로 이루어짐
- 데이터 타입에 맞는 연산을 수행해야 함
- 연산자 우선순위
    - 지수 > 음수 부호 > 곱셈, 나눗셈, 정수 나눗셈, 나머지 > 덧셈, 뺄셈

### 변수와 메모

- 변수 Variable
    - 값을 저장(참조)하기 위한 이름
    - 변수 할당 - 표현식을 통해 변수에 값을 저장
        1. 할당 연산자 오른쪽에 있는 표현식을 평가해서 값(메모리 주소)을 생성
        2. 값의 메모리 주소를 변수에 저장
        3. 새 변수라면 생성, 기존 변수라면 변수에 들어 있는 메모리 주소를 변경
    - **변수는 그 변수가 참조하는 객체의 메모리 주소를 가짐**
- 객체 Object
    - **타입**을 갖는 **메모리 주소** 내 **값**
    - **값이 들어있는 상자**

## Data Types

- 값들을 구분하고 어떻게 다뤄야 하는지 알기 위해 필요
- 타입을 명시적으로 지정하면 변수의 의도를 더 쉽게 이해하고, 잘못된 타입으로 인한 오류를 예방

### Numeric Types

- int
    - 정수자료형
    - 진수 표현 가능
        - 0b10, 0o30, 0x10
- float
    - 실수자료형
    - e 또는 E를 사용한 지수 표현 ex. 314e-2
- **유한 정밀도**
    - 제한된 용량, 2진수의 한계로 float은 실수에 대한 **근삿값**
    - 이 과정에서 **Floating point roundng error (부동소수점 에러)**가 발생함
    
    ```python
    a = 3.2 - 3.1
    b = 1.2 - 1.1
    print(a) # 0.1000..009
    print(b) # 0.0999..987
    print(a==b) # False
    ```
    
    - **decimal 모듈**을 사용해 부동소수점 연산의 정확성을 보장할 수 있음
    
    ```python
    from decimal import Decimal
    a = Decimal('3.2')-Decimal('3.1')
    b = Decimal('1.2')-Decimal('1.1')
    print(a) # 0.1
    print(b) # 0.1
    print(a==b) # True
    ```
    

### Sequence Types

- 여러 개의 값들을 **순서대로 나열**하여 저장하는 자료형
    - 순서 - 값들이 순서대로 저장 (정렬X)
    - 인덱싱 - 각 값에 고유한 인덱스가 있어 특정 위치의 값을 선택, 수정 가능
    - 슬라이싱 - 인덱스 범위 조절해 부분 추출 가능
    - 길이 - `len()` 함수로 저장된 값의 개수(길이) 구함
    - 반복 - 반복문으로 저장된 값들을 반복 처리 가능

### **str** 문자열

- 문자들의 순서가 있는 변경 불가능한 시퀀스 자료
- 따옴표로 감싸서 표현
- 작은따옴표가 들어있는 경우는 큰따옴표로, 반대의 경우는 반대로 문자열 생성
- **Escape sequence**
    - 특수한 기능을 하는 문자 조합, 일반적인 문법 규칙을 잠시 탈출

| 예약 문자 | 내용(의미) |
| --- | --- |
| \n | 줄 바꿈 |
| \t | 탭 |
| \\ | 백슬래시 |
| \’ | 작은 따옴표 |
| \” | 큰 따옴 |

```python
print('철수야\'안녕\'') # 철수야 '안녕'

'''
이 다음은 엔터
입니다.
'''
print('이 다음은 엔터\n입니다.')
```

- **String Interpolation**
    - 문자열 내 변수나 표현식 삽입
    - **f-string**
    
    ```python
    bugs = 'roaches'
    counts = 13
    area = 'living room'
    
    print(f'Debugging {bugs} {counts} {area}')
    ```
    
- 문자열의 시퀀스 특징

```python
my_str = 'hello'
print(my_str[1])
print(my_str[2:4])
print(my_str[:3])
print(my_str[0:5:2])
print(my_str[::-1])
print(len(my_str))
```

|  | h | e | l | l | o |
| --- | --- | --- | --- | --- | --- |
| index | 0 | 1 | 2 | 3 | 4 |
| index | -5 | -4 | -3 | -2 | -1 |
- 문자열은 불변(변경 불가)

## 참고

### Style Guide

코드의 일관성과 가독성 향상을 휘안 규칙과 권장 사항들

- 변수명은 직관적으로
    - 영문 알파벳, 언더스토어, 숫자로 구성
    - 숫자로 시작할 수 없음
    - 대소문자 구분
    - 파이썬 내부 예약어 사용 불가
- 공백 4칸으로 코드 블록 들여쓰기
- 한 줄의 길이는 79자로 제한, 길어지면 줄 바꿈
- 문자와 밑줄로 함수, 변수, 속성 이름 작성
- 함수 정의, 클래스 정의 등의 블록 사이에는 빈 줄 추가
- https://peps.python.org/pep-0008/

### Python Tutor

파이썬 프로그램이 어떻게 실행되는지 도와주는 시각화 도우미

https://pythontutor.com/
